
src/cal_display.rs,948
use crate::display::Operation as Op;1,0
use crate:crate2,37
use chrono::prelude:chrono::prelude6,121
pub struct Renderer 8,146
    pipe: RenderPipeline,9,168
const HEADING_ID: &str str12,197
const EMAIL_ID: &str str13,233
const EVENTS_ID: &str str14,265
const HEADING_POS: Pos 16,300
const EMAIL_POS: Pos 17,336
const EVENTS_POS: Pos 18,372
const INSTR1_POS: Pos 19,408
const CODE_POS: Pos 20,445
const INSTR2_POS: Pos 21,480
const EXPIRY_POS: Pos 22,518
const LARGE_SIZE: u32 24,557
const SMALL_SIZE: u32 25,585
const INSTR_SIZE: u32 26,613
const HEADING_SIZE: u32 27,641
const EMAIL_SIZE: u32 28,671
const EVENTS_SIZE: u32 29,699
const DATE_FORMAT: &str str31,729
const TIME_FORMAT: &str str32,764
const NO_EMAIL: &str str34,800
const NO_EVENTS: &str str35,840
const START_DELIMITER: &str str36,877
const END_DELIMITER: &str str37,912
const SUMMARY_DELIMITER: &str str38,945
const TIME_LEN: usize 41,1019

src/cal_machine.rs,1022
mod retriever;1,0
use crate:crate3,16
use chrono:chrono16,392
use retriever:retriever17,438
use serde:serde18,456
use std::time::Duration;19,493
use std:std20,518
stm!(cal_stm, Machine,29,722
type PeriodSeconds 42,1366
type AuthTokens 43,1392
const FOUR_MINS: Duration 45,1444
const RECHECK_PERIOD: Duration 46,1498
const BUTTON_POLL_PERIOD: Duration 47,1557
pub struct VolatileAuthenticator 58,1803
    pub access_token: String,59,1838
    expires_in: u64,60,1868
pub struct RefreshToken(String)64,1933
pub struct Authenticators 115,3250
    refresh_token: RefreshToken,116,3278
    volatiles: VolatileAuthenticator,117,3311
pub struct Email(pub String)145,4124
    pub struct Appointments 161,4497
        pub events: Vec<Vec162,4527
        state: Machine,163,4559
pub struct Event 210,6115
    pub summary: String,211,6134
    pub description: Option<Option212,6159
    pub start: DateTime<DateTime213,6196
    pub end: DateTime<DateTime214,6228
    use Machine:Machine257,7480

src/cal_machine/retriever.rs,2571
use chrono::prelude:chrono::prelude1,0
use reqwest:reqwest2,24
use serde::Deserialize;3,63
const DEVICE_CODE_URL: &str str5,88
const AUTHORISATION_URL: &str str6,170
const READ_URL: &str str7,248
const CLIENT_ID_KEY: &str str8,338
const CLIENT_ID_VAL: &str str9,379
const SCOPE_KEY: &str str11,487
const SCOPE_VAL: &str str12,520
const CLIENT_SECRET_KEY: &str str13,597
const CLIENT_SECRET_VAL: &str str14,646
const CODE_KEY: &str str15,706
const GRANT_TYPE_KEY: &str str16,737
const GRANT_TYPE_POLL_VAL: &str str17,780
const GRANT_TYPE_REFRESH_VAL: &str str18,856
const REFRESH_TOKEN_KEY: &str str19,910
const PAGE_TOKEN_KEY: &str str20,959
const TIME_MIN_KEY: &str str22,1002
const TIME_MAX_KEY: &str str23,1040
const MAX_RESULTS_KEY: &str str24,1078
const SINGLE_EVENTS_KEY: &str str25,1122
const AUTHORISATION_HEADER: &str str27,1171
const ACCEPT_HEADER: &str str28,1223
const ACCEPT_JSON: &str str29,1261
pub const TOKEN_TYPE: &str str30,1307
pub const ACCESS_DENIED_ERROR: &str str32,1347
pub const AUTHORISATION_PENDING_ERROR: &str str33,1402
pub const POLLING_TOO_FREQUENTLY_ERROR: &str str34,1473
pub struct PageToken(pub String)36,1534
pub struct EventRetriever 38,1569
    client: Client,39,1597
pub struct DeviceUserCodeResponse 115,4227
    pub device_code: String,116,4263
    pub user_code: String,117,4292
    pub expires_in: i64,118,4319
    pub interval: u32,119,4344
    pub verification_url: String,120,4367
pub const QUOTA_EXCEEDED_ERROR_CODE: &str str123,4404
pub struct DeviceUserCodeErrorResponse 125,4501
    pub error_code: String,126,4542
pub struct PollResponse 130,4603
    pub access_token: String,131,4629
    pub refresh_token: String,132,4659
    pub expires_in: u64,133,4690
    pub token_type: String,134,4715
pub struct RefreshResponse 138,4776
    pub access_token: String,139,4805
    pub expires_in: u64,140,4835
    pub token_type: String,141,4860
pub struct PollErrorResponse 145,4921
    pub error: String,146,4952
    pub error_description: String,147,4975
pub struct DateTimeStamp 152,5078
    pub date_time: String,154,5141
pub struct PersonalIdentifier 158,5216
    pub email: String,159,5248
pub struct Event 163,5304
    pub summary: String,164,5323
    pub description: Option<Option165,5348
    pub creator: PersonalIdentifier,166,5385
    pub start: DateTimeStamp,167,5422
    pub end: DateTimeStamp,168,5452
pub struct EventsResponse 173,5548
    pub next_page_token: Option<Option174,5576
    pub items: Vec<Vec175,5617

src/err.rs,126
        pub enum $enum_name 14,486
            $(15,516
                $var(16,531
                $var($embedded)16,531

src/main.rs,1283
mod cal_display;3,54
mod cal_machine;4,71
mod display;5,88
mod err;6,101
mod papirus_in;7,110
mod stm;8,126
use cal_display::Renderer;10,136
use cal_machine::Error as CalMachineError;11,163
use display::Error as DisplayError;12,206
use nix:nix13,242
use std:std14,283
enum PackageAction 36,698
    Install,37,719
    Uninstall,38,732
    let script_rel_path: &Path Path46,874
    let exe_link: &Path Path47,961
    let bin_dir: &Path Path48,1016
    let bin_path 50,1060
    let exe_path 51,1114
    let exe_name 52,1159
    let runnable_exe_path 61,1414
    let mut project_dir 62,1467
    let script_path 75,1812
    let script_name 76,1869
    let runnable_script_path 85,2122
    let version_path 86,2181
    let version_exe 87,2239
    let version_script 88,2290
    println!("exe is gone {:?}", version_exe)95,2494
    println!("script is gone {:?}", version_script)99,2623
    println!("version_path is gone {:?}", version_path)103,2753
const SCRIPT_NAME: &str str149,4299
const PKG_NAME: &str str150,4354
const VERSION: &str str151,4401
const DEFAULT_VAR_DIR: &str=str152,4450
    let args: Vec<Vec155,4517
    let dest_base: &Path Path156,4568
    let var_dir_opt=171,5050
    let var_dir=172,5101
    let quitter 179,5283

src/papirus_in.rs,992
use crate::{err, stm}stm1,0
use memmap::{Mmap, MmapOptions}MmapOptions2,23
    time::{Duration, Instant}Instant7,128
use LongPressMachine:LongPressMachine9,162
const BLOCK_SIZE: usize 11,188
const PIN_COUNT: usize 12,224
const READ_REG_OFFSET: usize 13,253
pub const SW1_GPIO: usize 15,289
pub const SW2_GPIO: usize 16,321
pub const SW3_GPIO: usize 17,353
pub const SW4_GPIO: usize 18,385
stm!(long_press_button_stm, LongPressMachine,29,573
pub enum LongButtonEvent 36,900
    Pressed,37,927
    LongPress,38,940
    Release,39,955
    PressAndRelease,40,968
pub struct DetectableDuration(pub Duration)68,1575
pub struct LongReleaseDuration(pub Duration)69,1620
pub struct LongPressButton 79,2107
    pin: Pin,80,2136
    state: LongPressMachine,81,2150
    detectable_after: DetectableDuration,82,2179
    long_release_after: LongReleaseDuration,83,2221
pub struct Pin(pub usize)183,5630
pub struct GPIO 185,5658
    map: Mmap,186,5676
    snap:snap187,5691

src/display.rs,907
use crate::err;1,0
use serde::Serialize;2,16
use serde_json::error::Error as SerdeError;3,38
use std::io:std::io4,82
use std::net:std::net5,121
use std::slice::Iter;6,178
use std::time::Duration;7,200
use std::thread;8,225
const DRIVER_PORT: u16 10,243
const SERVER_ADDR: Ipv4Addr 11,274
pub enum Operation 15,375
    AddText(16,396
    AddText(String,16,396
    AddText(String, Pos,16,396
    AddText(String, Pos, Size,16,396
    AddText(String, Pos, Size, Id)16,396
    UpdateText(17,432
    UpdateText(Id,17,432
    UpdateText(Id, String)17,432
    RemoveText(18,460
    RemoveText(Id)18,460
    Clear,19,480
    WriteAll(20,491
    WriteAll(PartialUpdate)20,491
    QuitWhenDone,21,520
type Id 24,541
type Size 25,559
pub struct PartialUpdate(pub bool)28,598
pub struct Pos(pub u32, pub u32)31,656
pub struct RenderPipeline 38,755
    stream: BufWriter<BufWriter39,783

src/stm.rs,0
